/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter eslint_disable,ts_nocheck,server_generic,client_none,optimize_code_size
// @generated from protobuf file "app.proto" (package "whiterabbit", syntax proto3)
// tslint:disable
// @ts-nocheck
import { StringValue } from "./google/protobuf/wrappers";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message whiterabbit.PageInfo
 */
export interface PageInfo {
  /**
   * @generated from protobuf field: bool hasPreviousPage = 1;
   */
  hasPreviousPage: boolean;
  /**
   * @generated from protobuf field: bool hasNextPage = 2;
   */
  hasNextPage: boolean;
  /**
   * @generated from protobuf field: optional string startCursor = 3;
   */
  startCursor?: string;
  /**
   * @generated from protobuf field: optional string endCursor = 4;
   */
  endCursor?: string;
}
/**
 * @generated from protobuf message whiterabbit.Sort
 */
export interface Sort {
  /**
   * @generated from protobuf field: string field = 1;
   */
  field: string;
  /**
   * @generated from protobuf field: whiterabbit.Order order = 2;
   */
  order: Order;
}
/**
 * @generated from protobuf message whiterabbit.Pagination
 */
export interface Pagination {
  /**
   * @generated from protobuf field: optional string after = 1;
   */
  after?: string;
  /**
   * @generated from protobuf field: optional string before = 2;
   */
  before?: string;
  /**
   * @generated from protobuf field: uint32 size = 3;
   */
  size: number;
  /**
   * @generated from protobuf field: optional uint32 offset = 4;
   */
  offset?: number;
}
/**
 * @generated from protobuf message whiterabbit.FindPageRequest
 */
export interface FindPageRequest {
  /**
   * @generated from protobuf field: optional string query = 1;
   */
  query?: string;
  /**
   * @generated from protobuf field: whiterabbit.Pagination pagination = 2;
   */
  pagination?: Pagination;
  /**
   * @generated from protobuf field: repeated whiterabbit.Sort sort = 3;
   */
  sort: Sort[];
}
/**
 * @generated from protobuf message whiterabbit.Group
 */
export interface Group {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp createdAt = 2;
   */
  createdAt?: Timestamp;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp updatedAt = 3;
   */
  updatedAt?: Timestamp;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp deletedAt = 4;
   */
  deletedAt?: Timestamp;
  /**
   * @generated from protobuf field: string name = 5;
   */
  name: string;
  /**
   * @generated from protobuf field: optional string description = 6;
   */
  description?: string;
}
/**
 * @generated from protobuf message whiterabbit.GroupPage
 */
export interface GroupPage {
  /**
   * @generated from protobuf field: whiterabbit.PageInfo pageInfo = 1;
   */
  pageInfo?: PageInfo;
  /**
   * @generated from protobuf field: repeated whiterabbit.GroupItem items = 2;
   */
  items: GroupItem[];
}
/**
 * @generated from protobuf message whiterabbit.GroupItem
 */
export interface GroupItem {
  /**
   * @generated from protobuf field: string cursor = 1;
   */
  cursor: string;
  /**
   * @generated from protobuf field: whiterabbit.Group data = 2;
   */
  data?: Group;
}
/**
 * @generated from protobuf message whiterabbit.GroupResponse
 */
export interface GroupResponse {
  /**
   * @generated from protobuf field: whiterabbit.Group group = 1;
   */
  group?: Group;
}
/**
 * @generated from protobuf message whiterabbit.User
 */
export interface User {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp createdAt = 2;
   */
  createdAt?: Timestamp;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp updatedAt = 3;
   */
  updatedAt?: Timestamp;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp deletedAt = 4;
   */
  deletedAt?: Timestamp;
  /**
   * @generated from protobuf field: string name = 5;
   */
  name: string;
  /**
   * @generated from protobuf field: whiterabbit.Role role = 6;
   */
  role: Role;
  /**
   * @generated from protobuf field: repeated whiterabbit.AuthId authIds = 7;
   */
  authIds: AuthId[];
}
/**
 * @generated from protobuf message whiterabbit.AuthId
 */
export interface AuthId {
  /**
   * @generated from protobuf field: string provider = 1;
   */
  provider: string;
  /**
   * @generated from protobuf field: string value = 2;
   */
  value: string;
}
/**
 * @generated from protobuf message whiterabbit.UserPage
 */
export interface UserPage {
  /**
   * @generated from protobuf field: whiterabbit.PageInfo pageInfo = 1;
   */
  pageInfo?: PageInfo;
  /**
   * @generated from protobuf field: repeated whiterabbit.UserItem items = 2;
   */
  items: UserItem[];
}
/**
 * @generated from protobuf message whiterabbit.UserItem
 */
export interface UserItem {
  /**
   * @generated from protobuf field: string cursor = 1;
   */
  cursor: string;
  /**
   * @generated from protobuf field: whiterabbit.User data = 2;
   */
  data?: User;
}
/**
 * @generated from protobuf message whiterabbit.UserResponse
 */
export interface UserResponse {
  /**
   * @generated from protobuf field: whiterabbit.User user = 1;
   */
  user?: User;
}
/**
 * @generated from protobuf enum whiterabbit.Order
 */
export enum Order {
  /**
   * @generated from protobuf enum value: ASC = 0;
   */
  ASC = 0,
  /**
   * @generated from protobuf enum value: DESC = 1;
   */
  DESC = 1,
}
/**
 * @generated from protobuf enum whiterabbit.Role
 */
export enum Role {
  /**
   * @generated from protobuf enum value: USER = 0;
   */
  USER = 0,
  /**
   * @generated from protobuf enum value: ADMIN = 1;
   */
  ADMIN = 1,
  /**
   * @generated from protobuf enum value: OWNER = 2;
   */
  OWNER = 2,
}
// @generated message type with reflection information, may provide speed optimized methods
class PageInfo$Type extends MessageType<PageInfo> {
  constructor() {
    super("whiterabbit.PageInfo", [
      {
        no: 1,
        name: "hasPreviousPage",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
      { no: 2, name: "hasNextPage", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
      {
        no: 3,
        name: "startCursor",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "endCursor",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.PageInfo
 */
export const PageInfo = new PageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sort$Type extends MessageType<Sort> {
  constructor() {
    super("whiterabbit.Sort", [
      { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "order",
        kind: "enum",
        T: () => ["whiterabbit.Order", Order],
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.Sort
 */
export const Sort = new Sort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pagination$Type extends MessageType<Pagination> {
  constructor() {
    super("whiterabbit.Pagination", [
      {
        no: 1,
        name: "after",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "before",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 3, name: "size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
      {
        no: 4,
        name: "offset",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.Pagination
 */
export const Pagination = new Pagination$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindPageRequest$Type extends MessageType<FindPageRequest> {
  constructor() {
    super("whiterabbit.FindPageRequest", [
      {
        no: 1,
        name: "query",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 2, name: "pagination", kind: "message", T: () => Pagination },
      {
        no: 3,
        name: "sort",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Sort,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.FindPageRequest
 */
export const FindPageRequest = new FindPageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Group$Type extends MessageType<Group> {
  constructor() {
    super("whiterabbit.Group", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "createdAt", kind: "message", T: () => Timestamp },
      { no: 3, name: "updatedAt", kind: "message", T: () => Timestamp },
      { no: 4, name: "deletedAt", kind: "message", T: () => Timestamp },
      { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 6,
        name: "description",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.Group
 */
export const Group = new Group$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupPage$Type extends MessageType<GroupPage> {
  constructor() {
    super("whiterabbit.GroupPage", [
      { no: 1, name: "pageInfo", kind: "message", T: () => PageInfo },
      {
        no: 2,
        name: "items",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => GroupItem,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.GroupPage
 */
export const GroupPage = new GroupPage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupItem$Type extends MessageType<GroupItem> {
  constructor() {
    super("whiterabbit.GroupItem", [
      { no: 1, name: "cursor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "data", kind: "message", T: () => Group },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.GroupItem
 */
export const GroupItem = new GroupItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupResponse$Type extends MessageType<GroupResponse> {
  constructor() {
    super("whiterabbit.GroupResponse", [
      { no: 1, name: "group", kind: "message", T: () => Group },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.GroupResponse
 */
export const GroupResponse = new GroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
  constructor() {
    super("whiterabbit.User", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "createdAt", kind: "message", T: () => Timestamp },
      { no: 3, name: "updatedAt", kind: "message", T: () => Timestamp },
      { no: 4, name: "deletedAt", kind: "message", T: () => Timestamp },
      { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 6,
        name: "role",
        kind: "enum",
        T: () => ["whiterabbit.Role", Role],
      },
      {
        no: 7,
        name: "authIds",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => AuthId,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthId$Type extends MessageType<AuthId> {
  constructor() {
    super("whiterabbit.AuthId", [
      { no: 1, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.AuthId
 */
export const AuthId = new AuthId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserPage$Type extends MessageType<UserPage> {
  constructor() {
    super("whiterabbit.UserPage", [
      { no: 1, name: "pageInfo", kind: "message", T: () => PageInfo },
      {
        no: 2,
        name: "items",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => UserItem,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.UserPage
 */
export const UserPage = new UserPage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserItem$Type extends MessageType<UserItem> {
  constructor() {
    super("whiterabbit.UserItem", [
      { no: 1, name: "cursor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "data", kind: "message", T: () => User },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.UserItem
 */
export const UserItem = new UserItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserResponse$Type extends MessageType<UserResponse> {
  constructor() {
    super("whiterabbit.UserResponse", [
      { no: 1, name: "user", kind: "message", T: () => User },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.UserResponse
 */
export const UserResponse = new UserResponse$Type();
/**
 * @generated ServiceType for protobuf service whiterabbit.GroupService
 */
export const GroupService = new ServiceType("whiterabbit.GroupService", [
  { name: "findOne", options: {}, I: StringValue, O: GroupResponse },
  { name: "findPage", options: {}, I: FindPageRequest, O: GroupPage },
  {
    name: "admins",
    serverStreaming: true,
    options: {},
    I: StringValue,
    O: User,
  },
  {
    name: "members",
    serverStreaming: true,
    options: {},
    I: StringValue,
    O: User,
  },
]);
/**
 * @generated ServiceType for protobuf service whiterabbit.UserService
 */
export const UserService = new ServiceType("whiterabbit.UserService", [
  { name: "findOne", options: {}, I: StringValue, O: UserResponse },
  { name: "findPage", options: {}, I: FindPageRequest, O: UserPage },
]);
