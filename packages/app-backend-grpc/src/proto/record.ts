/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter eslint_disable,ts_nocheck,server_generic,client_none,optimize_code_size
// @generated from protobuf file "record.proto" (package "whiterabbit.record", syntax proto3)
// tslint:disable
// @ts-nocheck
import { FindPageRequest } from "./shared";
import { StringValue } from "./google/protobuf/wrappers";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { NullableStringArray } from "./shared";
import { PageInfo } from "./shared";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message whiterabbit.record.Record
 */
export interface Record {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp createdAt = 2;
   */
  createdAt?: Timestamp;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp updatedAt = 3;
   */
  updatedAt?: Timestamp;
  /**
   * @generated from protobuf field: string journal = 4;
   */
  journal: string;
  /**
   * @generated from protobuf field: string name = 5;
   */
  name: string;
  /**
   * @generated from protobuf field: string description = 6;
   */
  description: string;
  /**
   * @generated from protobuf field: whiterabbit.record.Type type = 7;
   */
  type: Type;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp timestamp = 8;
   */
  timestamp?: Timestamp;
  /**
   * @generated from protobuf field: repeated string tags = 9;
   */
  tags: string[];
  /**
   * @generated from protobuf field: repeated whiterabbit.record.Item items = 10;
   */
  items: Item[];
}
/**
 * @generated from protobuf message whiterabbit.record.Item
 */
export interface Item {
  /**
   * @generated from protobuf field: string account = 1;
   */
  account: string;
  /**
   * @generated from protobuf field: double amount = 2;
   */
  amount: number;
  /**
   * @generated from protobuf field: optional double price = 3;
   */
  price?: number;
}
/**
 * @generated from protobuf message whiterabbit.record.RecordPage
 */
export interface RecordPage {
  /**
   * @generated from protobuf field: whiterabbit.shared.PageInfo pageInfo = 1;
   */
  pageInfo?: PageInfo;
  /**
   * @generated from protobuf field: repeated whiterabbit.record.RecordItem items = 2;
   */
  items: RecordItem[];
}
/**
 * @generated from protobuf message whiterabbit.record.RecordItem
 */
export interface RecordItem {
  /**
   * @generated from protobuf field: string cursor = 1;
   */
  cursor: string;
  /**
   * @generated from protobuf field: whiterabbit.record.Record data = 2;
   */
  data?: Record;
}
/**
 * @generated from protobuf message whiterabbit.record.RecordResponse
 */
export interface RecordResponse {
  /**
   * @generated from protobuf field: whiterabbit.record.Record item = 1;
   */
  item?: Record;
}
/**
 * @generated from protobuf message whiterabbit.record.CreateCommand
 */
export interface CreateCommand {
  /**
   * @generated from protobuf field: optional string targetId = 1;
   */
  targetId?: string;
  /**
   * @generated from protobuf field: string journal = 2;
   */
  journal: string;
  /**
   * @generated from protobuf field: string name = 3;
   */
  name: string;
  /**
   * @generated from protobuf field: string description = 4;
   */
  description: string;
  /**
   * @generated from protobuf field: whiterabbit.record.Type type = 5;
   */
  type: Type;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp timestamp = 6;
   */
  timestamp?: Timestamp;
  /**
   * @generated from protobuf field: repeated string tags = 7;
   */
  tags: string[];
  /**
   * @generated from protobuf field: repeated whiterabbit.record.Item items = 8;
   */
  items: Item[];
}
/**
 * @generated from protobuf message whiterabbit.record.UpdateCommand
 */
export interface UpdateCommand {
  /**
   * @generated from protobuf field: string targetId = 1;
   */
  targetId: string;
  /**
   * @generated from protobuf field: optional string journal = 2;
   */
  journal?: string;
  /**
   * @generated from protobuf field: optional string name = 3;
   */
  name?: string;
  /**
   * @generated from protobuf field: optional string description = 4;
   */
  description?: string;
  /**
   * @generated from protobuf field: optional whiterabbit.record.Type type = 5;
   */
  type?: Type;
  /**
   * @generated from protobuf field: optional google.protobuf.Timestamp timestamp = 6;
   */
  timestamp?: Timestamp;
  /**
   * @generated from protobuf field: whiterabbit.shared.NullableStringArray tags = 7;
   */
  tags?: NullableStringArray;
  /**
   * @generated from protobuf field: whiterabbit.record.NullableItemArray items = 8;
   */
  items?: NullableItemArray;
}
/**
 * @generated from protobuf message whiterabbit.record.NullableItemArray
 */
export interface NullableItemArray {
  /**
   * @generated from protobuf field: repeated whiterabbit.record.Item items = 1;
   */
  items: Item[];
}
/**
 * @generated from protobuf message whiterabbit.record.DeleteCommand
 */
export interface DeleteCommand {
  /**
   * @generated from protobuf field: string targetId = 1;
   */
  targetId: string;
}
/**
 * @generated from protobuf message whiterabbit.record.Command
 */
export interface Command {
  /**
   * @generated from protobuf oneof: command
   */
  command:
    | {
        oneofKind: "create";
        /**
         * @generated from protobuf field: whiterabbit.record.CreateCommand create = 1;
         */
        create: CreateCommand;
      }
    | {
        oneofKind: "update";
        /**
         * @generated from protobuf field: whiterabbit.record.UpdateCommand update = 2;
         */
        update: UpdateCommand;
      }
    | {
        oneofKind: "delete";
        /**
         * @generated from protobuf field: whiterabbit.record.DeleteCommand delete = 3;
         */
        delete: DeleteCommand;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message whiterabbit.record.Commands
 */
export interface Commands {
  /**
   * @generated from protobuf field: repeated whiterabbit.record.Command commands = 1;
   */
  commands: Command[];
}
/**
 * @generated from protobuf enum whiterabbit.record.Type
 */
export enum Type {
  /**
   * @generated from protobuf enum value: RECORD = 0;
   */
  RECORD = 0,
  /**
   * @generated from protobuf enum value: CHECK = 1;
   */
  CHECK = 1,
}
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
  constructor() {
    super("whiterabbit.record.Record", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "createdAt", kind: "message", T: () => Timestamp },
      { no: 3, name: "updatedAt", kind: "message", T: () => Timestamp },
      { no: 4, name: "journal", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 6,
        name: "description",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 7,
        name: "type",
        kind: "enum",
        T: () => ["whiterabbit.record.Type", Type],
      },
      { no: 8, name: "timestamp", kind: "message", T: () => Timestamp },
      {
        no: 9,
        name: "tags",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 10,
        name: "items",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Item,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.Record
 */
export const Record = new Record$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
  constructor() {
    super("whiterabbit.record.Item", [
      { no: 1, name: "account", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
      {
        no: 3,
        name: "price",
        kind: "scalar",
        opt: true,
        T: 1 /*ScalarType.DOUBLE*/,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecordPage$Type extends MessageType<RecordPage> {
  constructor() {
    super("whiterabbit.record.RecordPage", [
      { no: 1, name: "pageInfo", kind: "message", T: () => PageInfo },
      {
        no: 2,
        name: "items",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => RecordItem,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.RecordPage
 */
export const RecordPage = new RecordPage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecordItem$Type extends MessageType<RecordItem> {
  constructor() {
    super("whiterabbit.record.RecordItem", [
      { no: 1, name: "cursor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "data", kind: "message", T: () => Record },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.RecordItem
 */
export const RecordItem = new RecordItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecordResponse$Type extends MessageType<RecordResponse> {
  constructor() {
    super("whiterabbit.record.RecordResponse", [
      { no: 1, name: "item", kind: "message", T: () => Record },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.RecordResponse
 */
export const RecordResponse = new RecordResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCommand$Type extends MessageType<CreateCommand> {
  constructor() {
    super("whiterabbit.record.CreateCommand", [
      {
        no: 1,
        name: "targetId",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 2, name: "journal", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 4,
        name: "description",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: "type",
        kind: "enum",
        T: () => ["whiterabbit.record.Type", Type],
      },
      { no: 6, name: "timestamp", kind: "message", T: () => Timestamp },
      {
        no: 7,
        name: "tags",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 8,
        name: "items",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Item,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.CreateCommand
 */
export const CreateCommand = new CreateCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCommand$Type extends MessageType<UpdateCommand> {
  constructor() {
    super("whiterabbit.record.UpdateCommand", [
      { no: 1, name: "targetId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "journal",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "description",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: "type",
        kind: "enum",
        opt: true,
        T: () => ["whiterabbit.record.Type", Type],
      },
      { no: 6, name: "timestamp", kind: "message", T: () => Timestamp },
      { no: 7, name: "tags", kind: "message", T: () => NullableStringArray },
      { no: 8, name: "items", kind: "message", T: () => NullableItemArray },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.UpdateCommand
 */
export const UpdateCommand = new UpdateCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NullableItemArray$Type extends MessageType<NullableItemArray> {
  constructor() {
    super("whiterabbit.record.NullableItemArray", [
      {
        no: 1,
        name: "items",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Item,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.NullableItemArray
 */
export const NullableItemArray = new NullableItemArray$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCommand$Type extends MessageType<DeleteCommand> {
  constructor() {
    super("whiterabbit.record.DeleteCommand", [
      { no: 1, name: "targetId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.DeleteCommand
 */
export const DeleteCommand = new DeleteCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Command$Type extends MessageType<Command> {
  constructor() {
    super("whiterabbit.record.Command", [
      {
        no: 1,
        name: "create",
        kind: "message",
        oneof: "command",
        T: () => CreateCommand,
      },
      {
        no: 2,
        name: "update",
        kind: "message",
        oneof: "command",
        T: () => UpdateCommand,
      },
      {
        no: 3,
        name: "delete",
        kind: "message",
        oneof: "command",
        T: () => DeleteCommand,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.Command
 */
export const Command = new Command$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Commands$Type extends MessageType<Commands> {
  constructor() {
    super("whiterabbit.record.Commands", [
      {
        no: 1,
        name: "commands",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Command,
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message whiterabbit.record.Commands
 */
export const Commands = new Commands$Type();
/**
 * @generated ServiceType for protobuf service whiterabbit.record.RecordService
 */
export const RecordService = new ServiceType(
  "whiterabbit.record.RecordService",
  [
    { name: "findOne", options: {}, I: StringValue, O: RecordResponse },
    { name: "findPage", options: {}, I: FindPageRequest, O: RecordPage },
    {
      name: "findAll",
      serverStreaming: true,
      options: {},
      I: StringValue,
      O: Record,
    },
    { name: "handle", options: {}, I: Command, O: RecordResponse },
    {
      name: "handleAll",
      serverStreaming: true,
      options: {},
      I: Commands,
      O: RecordResponse,
    },
  ]
);
