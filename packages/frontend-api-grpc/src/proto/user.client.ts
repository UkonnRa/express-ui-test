/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter eslint_disable,ts_nocheck,optimize_code_size
// @generated from protobuf file "user.proto" (package "whiterabbit.user", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./user";
import type { Commands } from "./user";
import type { Command } from "./user";
import type { User } from "./user";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { UserPage } from "./user";
import type { FindPageRequest } from "./shared";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UserResponse } from "./user";
import type { StringValue } from "./google/protobuf/wrappers";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service whiterabbit.user.UserService
 */
export interface IUserServiceClient {
  /**
   * @generated from protobuf rpc: findOne(google.protobuf.StringValue) returns (whiterabbit.user.UserResponse);
   */
  findOne(
    input: StringValue,
    options?: RpcOptions
  ): UnaryCall<StringValue, UserResponse>;
  /**
   * @generated from protobuf rpc: findPage(whiterabbit.shared.FindPageRequest) returns (whiterabbit.user.UserPage);
   */
  findPage(
    input: FindPageRequest,
    options?: RpcOptions
  ): UnaryCall<FindPageRequest, UserPage>;
  /**
   * @generated from protobuf rpc: findAll(google.protobuf.StringValue) returns (stream whiterabbit.user.User);
   */
  findAll(
    input: StringValue,
    options?: RpcOptions
  ): ServerStreamingCall<StringValue, User>;
  /**
   * @generated from protobuf rpc: handle(whiterabbit.user.Command) returns (whiterabbit.user.UserResponse);
   */
  handle(
    input: Command,
    options?: RpcOptions
  ): UnaryCall<Command, UserResponse>;
  /**
   * @generated from protobuf rpc: handleAll(whiterabbit.user.Commands) returns (stream whiterabbit.user.UserResponse);
   */
  handleAll(
    input: Commands,
    options?: RpcOptions
  ): ServerStreamingCall<Commands, UserResponse>;
}
/**
 * @generated from protobuf service whiterabbit.user.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
  typeName = UserService.typeName;
  methods = UserService.methods;
  options = UserService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: findOne(google.protobuf.StringValue) returns (whiterabbit.user.UserResponse);
   */
  findOne(
    input: StringValue,
    options?: RpcOptions
  ): UnaryCall<StringValue, UserResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<StringValue, UserResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: findPage(whiterabbit.shared.FindPageRequest) returns (whiterabbit.user.UserPage);
   */
  findPage(
    input: FindPageRequest,
    options?: RpcOptions
  ): UnaryCall<FindPageRequest, UserPage> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<FindPageRequest, UserPage>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: findAll(google.protobuf.StringValue) returns (stream whiterabbit.user.User);
   */
  findAll(
    input: StringValue,
    options?: RpcOptions
  ): ServerStreamingCall<StringValue, User> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<StringValue, User>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: handle(whiterabbit.user.Command) returns (whiterabbit.user.UserResponse);
   */
  handle(
    input: Command,
    options?: RpcOptions
  ): UnaryCall<Command, UserResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<Command, UserResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: handleAll(whiterabbit.user.Commands) returns (stream whiterabbit.user.UserResponse);
   */
  handleAll(
    input: Commands,
    options?: RpcOptions
  ): ServerStreamingCall<Commands, UserResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<Commands, UserResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input
    );
  }
}
