/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter eslint_disable,ts_nocheck,optimize_code_size
// @generated from protobuf file "access-item.proto" (package "whiterabbit.accessItem", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AccessItemService } from "./access-item";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AccessItem } from "./access-item";
import type { FindAllRequest } from "./shared";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service whiterabbit.accessItem.AccessItemService
 */
export interface IAccessItemServiceClient {
  /**
   * @generated from protobuf rpc: findAll(whiterabbit.shared.FindAllRequest) returns (stream whiterabbit.accessItem.AccessItem);
   */
  findAll(
    input: FindAllRequest,
    options?: RpcOptions
  ): ServerStreamingCall<FindAllRequest, AccessItem>;
}
/**
 * @generated from protobuf service whiterabbit.accessItem.AccessItemService
 */
export class AccessItemServiceClient
  implements IAccessItemServiceClient, ServiceInfo
{
  typeName = AccessItemService.typeName;
  methods = AccessItemService.methods;
  options = AccessItemService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: findAll(whiterabbit.shared.FindAllRequest) returns (stream whiterabbit.accessItem.AccessItem);
   */
  findAll(
    input: FindAllRequest,
    options?: RpcOptions
  ): ServerStreamingCall<FindAllRequest, AccessItem> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<FindAllRequest, AccessItem>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input
    );
  }
}
