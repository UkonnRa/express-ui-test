import{_ as s,c as e,o,a}from"./app.10c85145.js";const h='{"title":"Cursor-Based Pagination (And More)","description":"","frontmatter":{},"headers":[{"level":2,"title":"What is Cursor-Based Pagination?","slug":"what-is-cursor-based-pagination"},{"level":2,"title":"Simple Cursor: ID","slug":"simple-cursor-id"},{"level":3,"title":"Backward Query","slug":"backward-query"},{"level":3,"title":"Conclusion","slug":"conclusion"},{"level":2,"title":"Reconsider Page-Based Pagination","slug":"reconsider-page-based-pagination"},{"level":2,"title":"Fat Cursor: Combine with Query and Sort","slug":"fat-cursor-combine-with-query-and-sort"}],"relativePath":"design/cursor-based-pagination.md","lastUpdated":1654443940000}',n={},t=a(`<h1 id="cursor-based-pagination-and-more" tabindex="-1">Cursor-Based Pagination (And More) <a class="header-anchor" href="#cursor-based-pagination-and-more" aria-hidden="true">#</a></h1><p>Pagination is a difficult topic. In most cases, the page-based pagination with offset and limit is enough. But what about cursor-based? And one more step, can we merge the two together?</p><h2 id="what-is-cursor-based-pagination" tabindex="-1">What is Cursor-Based Pagination? <a class="header-anchor" href="#what-is-cursor-based-pagination" aria-hidden="true">#</a></h2><p><a href="https://jsonapi.org/profiles/ethanresnick/cursor-pagination/" target="_blank" rel="noopener noreferrer">JSON:API</a> and <a href="https://relay.dev/graphql/connections.htm" target="_blank" rel="noopener noreferrer">GraphQL Cursor Connections Specification</a> is a great starter for understanding Cursor-Based Pagination.</p><p>Briefly speaking, when using Cursor-Based Pagination on a entity list, you need:</p><ul><li>a cursor pointing to an existing entity</li><li>a sorting strategy</li><li>the direction to fetch data from the cursor</li></ul><h2 id="simple-cursor-id" tabindex="-1">Simple Cursor: ID <a class="header-anchor" href="#simple-cursor-id" aria-hidden="true">#</a></h2><p>To point at an entity, the easiest way is ID. Say an API:</p><div class="language-typescript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findAll</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Query</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sort</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Sort</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cursor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IDString</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direction</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">forward</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">backward</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Page</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Entity</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Beside the provided <code>query</code>, <code>sort</code>, <code>cursor</code> and <code>direction</code> can be thought as <strong>additional queries</strong> too. If direction is <code>forward</code>, after being sorted by <code>[{ field: &quot;field1&quot;, order: ASC }, { field: &quot;field2&quot;, order: DESC }]</code>, comparing with the anchor pointed by cursor, the result should:</p><ul><li><code>result.field1</code> should be greater than <code>anchor.field1</code></li><li><code>result.field2</code> should be less than <code>anchor.field2</code></li><li>What&#39;s more, to prevent the entities with the exactly same values in the sorted fields, we need an additional filter like <code>result.ID &gt; anchor.ID</code>. In another word, <strong>we can consider ID is always in Sort and the order is always ascending</strong>.</li></ul><h3 id="backward-query" tabindex="-1">Backward Query <a class="header-anchor" href="#backward-query" aria-hidden="true">#</a></h3><p>But if the direction is <code>backward</code>, we need to <strong>reverse</strong> all the sort-related filters. In another word, we should change the backward query to the forward query. In that case,</p><ul><li><code>result.field1</code> should be <strong>less</strong> than <code>anchor.field1</code></li><li><code>result.field2</code> should be <strong>greater</strong> than <code>anchor.field2</code></li><li><code>result.ID</code> should be less than <code>anchor.ID</code></li></ul><p>After receiving the result, don&#39;t forget to reverse the whole result list to get the right order.</p><h3 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h3><p>In conclusion, the steps with Cursor-Based Pagination should be:</p><ul><li>Compute the additional filter items based on <code>sort</code>, <code>cursor</code> and <code>direction</code></li><li>Get the result based on <code>size</code></li><li>If is a backward query, reverse the result</li><li>About <code>hasPrevious</code> and <code>hasNext</code>, we need to fetch <code>size + 1</code> items to check whether there are more data to fetch</li></ul><h2 id="reconsider-page-based-pagination" tabindex="-1">Reconsider Page-Based Pagination <a class="header-anchor" href="#reconsider-page-based-pagination" aria-hidden="true">#</a></h2><p>In fact, the page-based pagination is a special case of the cursor-based pagination:</p><ul><li>The cursor is always empty, which means the query is always from the top of the database</li><li>The direction is always forward</li><li>It has an offset</li></ul><p>So our pagination strategy can support it by an additional field: <code>offset</code>:</p><div class="language-typescript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findAll</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Query</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sort</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Sort</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cursor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IDString</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direction</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">forward</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">backward</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> offset</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Page</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Entity</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>In the cursor-based context, the field <code>offset</code> can be explained as: when fetching the result, skip the first N entities.</p><h2 id="fat-cursor-combine-with-query-and-sort" tabindex="-1">Fat Cursor: Combine with <code>Query</code> and <code>Sort</code> <a class="header-anchor" href="#fat-cursor-combine-with-query-and-sort" aria-hidden="true">#</a></h2><p>Say if you get a cursor somehow, but you don&#39;t have the context of the previous query. In the above solution, you cannot get the result expected by the original query (the query where the cursor is generated).</p><p>If you want the cursor still workable even without the previous context (<code>Query</code> and <code>Sort</code>), you should bind them into the cursor as well. So instead of a bare ID, the cursor becomes <code>{id: &lt;Entity ID&gt;, query: &lt;Query&gt;, sort: &lt;Sort&gt;}</code>. And the API will become:</p><div class="language-typescript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findAll</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cursor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cursor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direction</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">forward</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">backward</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> offset</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> query</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Query</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sort</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Sort</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Page</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Entity</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Here <code>query</code> and <code>sort</code> is optional and should be null <strong>unless the cursor is not provided</strong>.</p><p>This use case is a little weird, but may be helpful in specific cases.</p>`,30),r=[t];function l(p,c,i,d,y,u){return o(),e("div",null,r)}var F=s(n,[["render",l]]);export{h as __pageData,F as default};
